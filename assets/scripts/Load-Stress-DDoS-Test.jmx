<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variable">
        <collectionProp name="Arguments.arguments">
          <elementProp name="target_ip" elementType="Argument">
            <stringProp name="Argument.name">target_ip</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Load-Stress-DDoS-Test">
        <stringProp name="TestPlan.comments">Для проверки </stringProp>
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SYN Flood">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler">
            <stringProp name="TCPSampler.server">${target_ip}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">80</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout">3000</stringProp>
            <stringProp name="TCPSampler.ctimeout">3000</stringProp>
            <stringProp name="TCPSampler.request">Hello It&apos;s me</stringProp>
            <boolProp name="TCPSampler.closeConnection">false</boolProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SYN-ACK Flood " enabled="false">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ACK Flood" enabled="false">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="true">
            <stringProp name="TCPSampler.classname">TCPClientImpl</stringProp>
            <stringProp name="TCPSampler.server">45.87.153.208</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">8080</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout">3000</stringProp>
            <stringProp name="TCPSampler.ctimeout">3000</stringProp>
            <stringProp name="TCPSampler.request">589801bbe1929d0a7a8b529e501003ffc6880000</stringProp>
            <boolProp name="TCPSampler.closeConnection">false</boolProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="RST Flood" enabled="false">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PSH, ACK Flood" enabled="false">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="true">
            <stringProp name="TCPSampler.classname">TCPClientImpl</stringProp>
            <stringProp name="TCPSampler.server">45.87.153.208</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">8081</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout">3000</stringProp>
            <stringProp name="TCPSampler.ctimeout">3000</stringProp>
            <stringProp name="TCPSampler.request">7c10c9d5d0f0a8a15980c2740800450000d3f39d400080064c87c0a832302d5799d0124c1f915f7733f8430ba6465018040277a200001420fc6cf41fcf5b926f1e2fd83a64264fb471cc625e45619a0bde54a7c022be4f2a8de39fc1568ef50466af96336bf8b5a5ec75f61920ea8734415135efd5e686b32c0d8c8b1f2bb1c3c853cff9d75187629d99569cbecd391fc120ac14bbe2a13093d81b0a4bdbb5242574b3d0f7241170729d1f5f48b8200920d6b47a50710ac096bd0e14f6a17ae2ecfbbcc0fd1fda064d0b2598127b495e8855066cf04fb573aa2ea71da9f757d737</stringProp>
            <boolProp name="TCPSampler.closeConnection">false</boolProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="UDP Flood" enabled="false">
          <stringProp name="TestPlan.comments">hping3 -2  --flood ${IP_ADDRESS}
Доп. Материал: https://www.youtube.com/watch?v=pSh6RN0R1Mg
</stringProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="jp@gc - UDP Request" enabled="false">
            <stringProp name="hostname">8.8.8.8</stringProp>
            <stringProp name="port">53</stringProp>
            <boolProp name="waitresponse">true</boolProp>
            <boolProp name="closechannel">false</boolProp>
            <stringProp name="timeout">1000</stringProp>
            <stringProp name="data">000a010000010000000000000a6d7061646d696e626f780272750000010001</stringProp>
            <stringProp name="encodeclass">kg.apc.jmeter.samplers.HexStringUDPDecoder</stringProp>
            <stringProp name="bind_address"></stringProp>
            <stringProp name="bind_port"></stringProp>
          </kg.apc.jmeter.samplers.UDPSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="NTP Flood" enabled="false">
          <stringProp name="TestPlan.comments">NTP Port - 123
Один из вариантов UDP-флуда, DoS-атака на серверы, использующие протокол NTP (Network Time Protocol), применяемый для синхронизации внутренних часов компьютеров. Чрезмерная нагрузка на NTP-сервер создается путем отправки множества поддельных NTP-запросов с большого количества разных IP-адресов.
Источник: https://dev.to/qainsights/network-time-protocol-performance-testing-using-apache-jmeter-1197
Доп. Материал: https://ab57.ru/cmdlist/w32tm.html</stringProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="NTP Flood Req">
            <stringProp name="hostname">time.cloudflare.com</stringProp>
            <stringProp name="port">123</stringProp>
            <boolProp name="waitresponse">true</boolProp>
            <boolProp name="closechannel">false</boolProp>
            <stringProp name="timeout">1000</stringProp>
            <stringProp name="data">0b000000000000000000000000000000000000000000000000000000000000000000000000000000e9997818bfb6134c</stringProp>
            <stringProp name="encodeclass">kg.apc.jmeter.samplers.HexStringUDPDecoder</stringProp>
            <stringProp name="bind_address"></stringProp>
            <stringProp name="bind_port"></stringProp>
          </kg.apc.jmeter.samplers.UDPSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DNS Flood" enabled="false">
          <stringProp name="TestPlan.comments">DNS Port - 53
Разновидность UDP Flood, нацеленная на DNS сервис. В процессе DNS Flood на атакуемый DNS сервер направляется огромное количество DNS запросов с широкого диапазона IP-адресов. Сервер-жертва не в состоянии определить, какой из пакетов пришел от реального клиента, а какой нет, и отвечает на все запросы. Таким образом, DNS Flood занимает все сетевые ресурсы и полосу пропускания DNS-сервера, вызывая его отказ.
DNS Flood является очень продуманным видом DDoS-атак: содержимое пакетов организовано точно так, как в реальных DNS запросах. Такую атаку невозможно отследить с помощью глубокого анализа: каждый запрос будет выглядеть легитимным. С большим диапазоном атакующих IP-адресов мошенник может с легкостью обойти большинство алгоритмов обнаружения аномалий трафика.
Источник: https://medium.com/@ivanderbyl/load-testing-dns-aa2a90e7296c</stringProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="DNS Flood Req">
            <stringProp name="hostname"></stringProp>
            <stringProp name="port">53</stringProp>
            <boolProp name="waitresponse">true</boolProp>
            <boolProp name="closechannel">false</boolProp>
            <stringProp name="timeout">1000</stringProp>
            <stringProp name="data">${target_ip}. A IN</stringProp>
            <stringProp name="encodeclass">kg.apc.jmeter.samplers.DNSJavaDecoder</stringProp>
            <stringProp name="bind_address"></stringProp>
            <stringProp name="bind_port"></stringProp>
          </kg.apc.jmeter.samplers.UDPSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="IP Frag" enabled="false">
          <stringProp name="TestPlan.comments">nmap -sS -p ${port} -f ${IP_ADDRESS}
Доп. Материал: 
https://www.youtube.com/watch?v=vdajb14Lcu0
https://youtu.be/oVCkj8ZygsE?si=Tu2wc8AZAz01fgrz</stringProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="IP Frag NMAP">
            <stringProp name="TestPlan.comments">nmap -sS -p 80 -f 192.168.50.198</stringProp>
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">CMD</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">nmap -sS -p 80 -f 192.168.50.198</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">C:\Windows\System32</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="HTTP Slow Attack" enabled="false">
          <stringProp name="TestPlan.comments">lbd - Checks if a given domain uses load-balancing.
Вопросы к Заказчикам:
Сколько сокетов открывать?

Доп. Материал:
https://github.com/gkbrk/slowloris</stringProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ICMP Flood" enabled="false">
          <stringProp name="TestPlan.comments">
На сервер-жертву посылается большое количество поддельных ICMP-пакетов с широкого диапазона IP-адресов. Цель злоумышленника — заполнить канал и вызвать перегрузку сервера потоком поддельных запросов. Учитывая, что ICMP-пакеты не требуют подтверждения о получении, как TCP, «мусорный» трафик по протоколу ICMP так же тяжело выявлять, как и UDP. ICMP Flood реализуется с целью сбора информации о сервере (открытые порты и адрес назначения), чтобы организовать узконаправленную атаку по порту или приложению.
Одним из способов защиты от ICMP Flood является запрет ICMP на пограничном маршрутизаторе, но тогда будет заблокирован и легитимный трафик, в том числе ICMP ECH пакеты. Учитывая служебные функции протокола ICMP, его блокировка может стать причиной потерь других пакетов, нарушения связности и снижения пропускной способности каналов.</stringProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Ping Flood" enabled="true">
            <stringProp name="TestPlan.comments">ping -f -l ${количество байт} ${IP_ADDRESS}
Одна из разновидностей атак типа ICMP Flood, нацеленная на приведение сервера к отказу за счет конкретного приложения — утилиты PING и ее аналогов. Во время Ping Flood на сервер-жертву приходит большое количество ICMP Echo-Request пакетов с широкого диапазона IP-адресов, что ведет к падению производительности сервера и занятию полосы пропускания. Это также может служить причиной недоступности сети.
Поскольку поток запросов идет с широкого диапазона IP-адресов (как реальных, так и поддельных) идентифицировать легитимные ICMP Echo-Request пакеты становится почти невозможно. Способ защиты от данной атаки идентичен защите от ICMP Flood. Также можно заблокировать на маршрутизаторе только ICMP-ECHO или установить ограничения по числу пакетов в единицу времени.</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SIP Invite Flood" enabled="false">
          <stringProp name="TestPlan.comments">Flood-атака на SIP-протокол, путем отправки множества неверных запросов на соединение. Идея заключается в атаке на оборудование пограничного контроля сессий с отправкой множества запросов с целью выведения сервера/сетевого оборудования из строя.

sipvicious
Доп. Материал
https://docs.sipvicious.pro/stable/cui-reference/sip/dos/flood/</stringProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
